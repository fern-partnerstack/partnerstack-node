/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { PartnerstackVendorApi } from "@fern-api/partnerstack";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.PartnerstackVendorApiEnvironment | string;
    credentials?: core.Supplier<core.BasicAuth>;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async assignPartnership(
    dealKey: string,
    partnershipKey: string,
    stackKey: string
  ): Promise<PartnerstackVendorApi.deal.assignPartnership.Response> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.PartnerstackVendorApiEnvironment.Production,
        `/deals/${dealKey}/assignment/${partnershipKey}/${stackKey}`
      ),
      method: "POST",
      headers: {
        Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.deal.assignPartnership.Response.parse(
          _response.body as serializers.deal.assignPartnership.Response.Raw
        ),
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          return {
            ok: false,
            error: PartnerstackVendorApi.deal.assignPartnership.Error.badRequestError(
              await serializers.BadRequestError.parse(_response.error.body as serializers.BadRequestError.Raw)
            ),
          };
        case 401:
          return {
            ok: false,
            error: PartnerstackVendorApi.deal.assignPartnership.Error.unauthorizedError(
              await serializers.UnauthorizedError.parse(_response.error.body as serializers.UnauthorizedError.Raw)
            ),
          };
      }
    }

    return {
      ok: false,
      error: PartnerstackVendorApi.deal.assignPartnership.Error._unknown(_response.error),
    };
  }
}
