/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { PartnerstackVendorApi } from "@fern-api/partnerstack";
import * as core from "../../../core";

export type Response = core.APIResponse<
  PartnerstackVendorApi.PartnershipResponse,
  PartnerstackVendorApi.deal.assignPartnership.Error
>;
export type Error =
  | PartnerstackVendorApi.deal.assignPartnership.Error.BadRequestError
  | PartnerstackVendorApi.deal.assignPartnership.Error.UnauthorizedError
  | PartnerstackVendorApi.deal.assignPartnership.Error._Unknown;

export declare namespace Error {
  interface BadRequestError extends _Utils {
    statusCode: 400;
    content: PartnerstackVendorApi.BadRequestError;
  }

  interface UnauthorizedError extends _Utils {
    statusCode: 401;
    content: PartnerstackVendorApi.UnauthorizedError;
  }

  interface _Unknown extends _Utils {
    statusCode: void;
    content: core.Fetcher.Error;
  }

  interface _Utils {
    _visit: <_Result>(visitor: PartnerstackVendorApi.deal.assignPartnership.Error._Visitor<_Result>) => _Result;
  }

  interface _Visitor<_Result> {
    badRequestError: (value: PartnerstackVendorApi.BadRequestError) => _Result;
    unauthorizedError: (value: PartnerstackVendorApi.UnauthorizedError) => _Result;
    _other: (value: core.Fetcher.Error) => _Result;
  }
}

export const Error = {
  badRequestError: (
    value: PartnerstackVendorApi.BadRequestError
  ): PartnerstackVendorApi.deal.assignPartnership.Error.BadRequestError => {
    const valueWithoutVisit: Omit<PartnerstackVendorApi.deal.assignPartnership.Error.BadRequestError, "_visit"> = {
      content: value,
      statusCode: 400,
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: PartnerstackVendorApi.deal.assignPartnership.Error.BadRequestError, visitor: PartnerstackVendorApi.deal.assignPartnership.Error._Visitor<_Result>) {
      return PartnerstackVendorApi.deal.assignPartnership.Error._visit(this, visitor);
    });
  },

  unauthorizedError: (
    value: PartnerstackVendorApi.UnauthorizedError
  ): PartnerstackVendorApi.deal.assignPartnership.Error.UnauthorizedError => {
    const valueWithoutVisit: Omit<PartnerstackVendorApi.deal.assignPartnership.Error.UnauthorizedError, "_visit"> = {
      content: value,
      statusCode: 401,
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: PartnerstackVendorApi.deal.assignPartnership.Error.UnauthorizedError, visitor: PartnerstackVendorApi.deal.assignPartnership.Error._Visitor<_Result>) {
      return PartnerstackVendorApi.deal.assignPartnership.Error._visit(this, visitor);
    });
  },

  _unknown: (fetcherError: core.Fetcher.Error): PartnerstackVendorApi.deal.assignPartnership.Error._Unknown => {
    const valueWithoutVisit = fetcherError as unknown as Omit<
      PartnerstackVendorApi.deal.assignPartnership.Error._Unknown,
      "_visit"
    >;
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: PartnerstackVendorApi.deal.assignPartnership.Error._Unknown, visitor: PartnerstackVendorApi.deal.assignPartnership.Error._Visitor<_Result>) {
      return PartnerstackVendorApi.deal.assignPartnership.Error._visit(this, visitor);
    });
  },

  _visit: <_Result>(
    value: PartnerstackVendorApi.deal.assignPartnership.Error,
    visitor: PartnerstackVendorApi.deal.assignPartnership.Error._Visitor<_Result>
  ): _Result => {
    switch (value.statusCode) {
      case 400:
        return visitor.badRequestError(value.content);
      case 401:
        return visitor.unauthorizedError(value.content);
      default:
        return visitor._other(value as any);
    }
  },
} as const;
