/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { PartnerstackApi } from "@fern-api/partnerstack";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.PartnerstackApiEnvironment | string;
        credentials?: core.Supplier<core.BasicAuth>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Returns a list of your actions. The actions are returned sorted by creation date by default, with the most recent actions appearing first.
     */
    public async listAllActions(
        request: PartnerstackApi.ListAllActionsRequest = {}
    ): Promise<PartnerstackApi.ListAllActionsResponse> {
        const {
            minCreated,
            maxCreated,
            minUpdated,
            maxUpdated,
            partnershipKey,
            actionType,
            orderBy,
            limit,
            startingAfter,
            endingBefore,
        } = request;
        const _queryParams = new URLSearchParams();
        if (minCreated != null) {
            _queryParams.append("min_created", minCreated.toString());
        }

        if (maxCreated != null) {
            _queryParams.append("max_created", maxCreated.toString());
        }

        if (minUpdated != null) {
            _queryParams.append("min_updated", minUpdated.toString());
        }

        if (maxUpdated != null) {
            _queryParams.append("max_updated", maxUpdated.toString());
        }

        if (partnershipKey != null) {
            _queryParams.append("partnership_key", partnershipKey);
        }

        if (actionType != null) {
            _queryParams.append("action_type", actionType);
        }

        if (orderBy != null) {
            _queryParams.append("order_by", orderBy);
        }

        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (startingAfter != null) {
            _queryParams.append("starting_after", startingAfter);
        }

        if (endingBefore != null) {
            _queryParams.append("ending_before", endingBefore);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PartnerstackApiEnvironment.Production, "/v2/actions"),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.ListAllActionsResponse.parse(
                _response.body as serializers.ListAllActionsResponse.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PartnerstackApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PartnerstackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PartnerstackApiTimeoutError();
            case "unknown":
                throw new errors.PartnerstackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Records a new action taken by a given partner or customer, and the number of times that action was performed.
     */
    public async record(
        request: PartnerstackApi.RecordActionRequest = {}
    ): Promise<PartnerstackApi.RecordActionResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PartnerstackApiEnvironment.Production, "/v2/actions"),
            method: "POST",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.RecordActionRequest.json(request),
        });
        if (_response.ok) {
            return await serializers.RecordActionResponse.parse(_response.body as serializers.RecordActionResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PartnerstackApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PartnerstackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PartnerstackApiTimeoutError();
            case "unknown":
                throw new errors.PartnerstackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Archives an action. Any associated rewards or drip rewards will be archived as well.
     */
    public async archive(actionKey: string): Promise<PartnerstackApi.ArchiveActionResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PartnerstackApiEnvironment.Production,
                `/v2/actions/${actionKey}`
            ),
            method: "DELETE",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.ArchiveActionResponse.parse(
                _response.body as serializers.ArchiveActionResponse.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PartnerstackApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PartnerstackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PartnerstackApiTimeoutError();
            case "unknown":
                throw new errors.PartnerstackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
