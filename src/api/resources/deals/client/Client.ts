/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { PartnerStackApi } from "@fern-api/partnerstack";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.PartnerStackApiEnvironment | string;
        credentials?: core.Supplier<core.BasicAuth>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Assign the provided partnership to the provided deal.
     */
    public async assignPartnership(
        dealKey: string,
        partnershipKey: string,
        stackKey: string
    ): Promise<PartnerStackApi.AssignPartnershipResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PartnerStackApiEnvironment.Production,
                `/deals/${dealKey}/assignment/${partnershipKey}/${stackKey}`
            ),
            method: "POST",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.AssignPartnershipResponse.parse(
                _response.body as serializers.AssignPartnershipResponse.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PartnerStackApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PartnerStackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PartnerStackApiTimeoutError();
            case "unknown":
                throw new errors.PartnerStackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get the file for the deal.
     */
    public async getDealFile(dealKey: string, fileKey: string): Promise<PartnerStackApi.DealFileResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PartnerStackApiEnvironment.Production,
                `/deals/${dealKey}/file/${fileKey}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.DealFileResponse.parse(_response.body as serializers.DealFileResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PartnerStackApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PartnerStackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PartnerStackApiTimeoutError();
            case "unknown":
                throw new errors.PartnerStackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns a list of your deals. The deals are
     *     returned sorted by creation date, with the most recent deals
     *     appearing first.
     */
    public async listAllDeals(
        request: PartnerStackApi.ListAllDealsRequest = {}
    ): Promise<PartnerStackApi.ListAllDealsResponse> {
        const {
            minCreated,
            maxCreated,
            minUpdated,
            maxUpdated,
            group,
            partnerKey,
            limit,
            startingAfter,
            endingBefore,
        } = request;
        const _queryParams = new URLSearchParams();
        if (minCreated != null) {
            _queryParams.append("min_created", minCreated.toString());
        }

        if (maxCreated != null) {
            _queryParams.append("max_created", maxCreated.toString());
        }

        if (minUpdated != null) {
            _queryParams.append("min_updated", minUpdated.toString());
        }

        if (maxUpdated != null) {
            _queryParams.append("max_updated", maxUpdated.toString());
        }

        if (group != null) {
            _queryParams.append("group", group);
        }

        if (partnerKey != null) {
            _queryParams.append("partner_key", partnerKey);
        }

        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (startingAfter != null) {
            _queryParams.append("starting_after", startingAfter);
        }

        if (endingBefore != null) {
            _queryParams.append("ending_before", endingBefore);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PartnerStackApiEnvironment.Production, "/v2/deals"),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.ListAllDealsResponse.parse(_response.body as serializers.ListAllDealsResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PartnerStackApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PartnerStackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PartnerStackApiTimeoutError();
            case "unknown":
                throw new errors.PartnerStackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Creates a deal with desired params.
     */
    public async create(request: PartnerStackApi.CreateDealRequestBody): Promise<PartnerStackApi.DealResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PartnerStackApiEnvironment.Production, "/v2/deals"),
            method: "POST",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.CreateDealRequestBody.json(request),
        });
        if (_response.ok) {
            return await serializers.DealResponse.parse(_response.body as serializers.DealResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PartnerStackApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PartnerStackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PartnerStackApiTimeoutError();
            case "unknown":
                throw new errors.PartnerStackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Fetches the specified form templates for a deal.
     */
    public async getFormTemplate(
        request: PartnerStackApi.GetFormTemplateRequest = {}
    ): Promise<PartnerStackApi.FormTemplateResponse> {
        const { groupKey, moldKey, partnerKey } = request;
        const _queryParams = new URLSearchParams();
        if (groupKey != null) {
            _queryParams.append("group_key", groupKey);
        }

        if (moldKey != null) {
            _queryParams.append("mold_key", moldKey);
        }

        if (partnerKey != null) {
            _queryParams.append("partner_key", partnerKey);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PartnerStackApiEnvironment.Production,
                "/v2/deals/form-templates"
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.FormTemplateResponse.parse(_response.body as serializers.FormTemplateResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PartnerStackApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PartnerStackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PartnerStackApiTimeoutError();
            case "unknown":
                throw new errors.PartnerStackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieves the details of an existing deal. You need only supply the unique deal key that was returned upon deal creation.
     */
    public async get(dealKey: string): Promise<PartnerStackApi.DealResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PartnerStackApiEnvironment.Production,
                `/v2/deals/${dealKey}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.DealResponse.parse(_response.body as serializers.DealResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PartnerStackApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PartnerStackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PartnerStackApiTimeoutError();
            case "unknown":
                throw new errors.PartnerStackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Archives the specified deal
     */
    public async delete(dealKey: string): Promise<PartnerStackApi.BaseResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PartnerStackApiEnvironment.Production,
                `/v2/deals/${dealKey}`
            ),
            method: "DELETE",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.BaseResponse.parse(_response.body as serializers.BaseResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PartnerStackApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PartnerStackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PartnerStackApiTimeoutError();
            case "unknown":
                throw new errors.PartnerStackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates the specified deal by setting the values of
     *     the parameters passed. Any parameters not provided will be left
     *     unchanged.
     */
    public async update(
        dealKey: string,
        request: PartnerStackApi.UpdateDealRequest = {}
    ): Promise<PartnerStackApi.DealResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PartnerStackApiEnvironment.Production,
                `/v2/deals/${dealKey}`
            ),
            method: "PATCH",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.UpdateDealRequest.json(request),
        });
        if (_response.ok) {
            return await serializers.DealResponse.parse(_response.body as serializers.DealResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PartnerStackApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PartnerStackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PartnerStackApiTimeoutError();
            case "unknown":
                throw new errors.PartnerStackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Converts a deal to a customer
     */
    public async convertDealToCustomer(
        dealKey: string,
        request: PartnerStackApi.ConvertDealToCustomerRequest
    ): Promise<unknown> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PartnerStackApiEnvironment.Production,
                `/v2/deals/${dealKey}/convert`
            ),
            method: "POST",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.ConvertDealToCustomerRequest.json(request),
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PartnerStackApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PartnerStackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PartnerStackApiTimeoutError();
            case "unknown":
                throw new errors.PartnerStackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets the files attached to the specified deal
     */
    public async getDealFiles(dealKey: string): Promise<PartnerStackApi.DealFilesResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PartnerStackApiEnvironment.Production,
                `/v2/deals/${dealKey}/files`
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.DealFilesResponse.parse(_response.body as serializers.DealFilesResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PartnerStackApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PartnerStackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PartnerStackApiTimeoutError();
            case "unknown":
                throw new errors.PartnerStackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
